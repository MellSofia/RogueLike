ЗАДАНИЕ: создать первые структуры игры.

на основе созданной программы (внизу после "=" есть шаблон), которая может выводить на экран объекты и управлять персонажем, нужно описать базовые объекты Entity и Item и несколько производных от них. для каждого объекта нужно описать его взаимодействие с другими классами при коллизии. ВАЖНО: описывать взаимодействие стоит с классами вверх пирамидкой! то есть если есть класс супер объект, от него наследуется ентити и айтем, то для айтем нужно прописать взаимодействие только с ентити, тк наследники ентити поумолчанию будут включать в себя базовое взаимодействие с айтем. 

так же для супер-обжекта нужно описать базовые взаимодействия (толкать, тянуть), которые и будут использоваться внутри метода обработки коллизии. по мере "спуска" по иерархии наследования, эти взаимодействия будут дополняться и переписываться, но их все так же нужно использовать для уменьшения кода.


==========================================================
==========================================================
первичный алгоритм обработки событий. он находится внутри главного цикла игры.

- добавления:
добавить в супер-объект параметры направления, действия и скорости движения (=1 - одна единица в координатах при движении за кадр)


- ЭТАП 1: ввод
собирается ввод с клавиатуры, устанавливаются значения поведелния объектов. NPC (не игровые персонажи) действуют согласно своему паттерну, который задается массивом действий и/или определенными условиями. паттерн применяется к каждому NPC(НПС) через функцию, которая при каждом вызове возвращает следующую операцию из списка паттерна, который, в свою очередь, зациклен.

пример: Entity.whatToDo(int action) // action =1 - движение вверх, =2 - движение вправо, .. =6 - ударить и тд. вместо Int можно использовать и слово с указанием действия (для единообразия эти слова можно сделать константами типа чар, дабы исключить ошибочный ввод команды)

в конце этапа все объекты, которые еще "живы" добавляются в массив обработки objectArr


- ЭТАП 2: update
на этом этапе происходит обработка и применение событий, в частности коллизия. запускается цикл по objectArr, внутри которого происходит ряд проверок:
for (cur in boxArr)
if (cur.speed!=0)
{
 if (display[cur.obj->move().y][objectArr[i].move().x] != '.') 
 // проверка на то, пустое ли то место, куда хочет переместиться объект через  метод move(), который возвращает объект типа COORD, который имеет x и y. если  свободно - движение возможно (координаты объекта = objectArr[i].move()), иначе -   выполняется следующий блок
 {
  // здесь происходит поиск объекта, с которым произошла коллизия через символ на   дисплее или через координаты (можно пока вставить цикл по тому же objectArr,   который будет искать соответствие по координатам)
  ...
  hitedObject = objectArr[j]
  ...
  // далее происходит сам вызов обработчиков коллизии для объектов:
  objectArr[i] = objectArr[i].collision_handler(hitedObject.collision_handler(objectArr[i]));
  <OR>  
  objectArr[i].collision_handler(hitedObject); //внутри коллизии объекта вызывается коллизия хитедОбж. сам метод работает с ссылкой на объект столкновения
  <OR>
  collision(objectArr[i], hitedObject); //друж фун-ция, к-ая вызывает не просто их коллизии, а проверяет их типы и соотв. взаимодействия

  // и уже внутри каждой реализации коллизии будут производиться изменения. а   возвращается всегда объект самого объекта, кто делал обработку. Важно! метод   move() не изменяет параметры объекта, он просто выводит предполагаемое их   изменение

 } 

}

- ЭТАП 3: output
уже есть в шаблоне - закрепление изменений на дисплее и вывод его на экран.


=================================================
данный алгоритм является опорным и его не стоит использовать прям как есть: код представлен только как сокращение текста и для большей наглядности. можете изменять его 

==========================================================
==========================================================
на основе кода внизу файла, реализовать универсальную обработку коллизий. Ваш алгоритм должен быть легко масштабируемым на динамически изменяемое количество объектов. так же нужно добавить обработку движения персонажа (ввод символов WASD и соответствующее изменение координат объекта). не забудьте, что все объекты находяться в массиве pointArr и обращаться к ним нужно через индекс. 




======================== БАЗОВЫЙ КОД ========================

#include <iostream>
#include <Windows.h>
#include <vector>
using namespace std;


class Point
{
public:
    char icon;
    int x;
    int y;
    Point(int xP, int yP, const char iconP) :
        x{ xP }, y{ yP }, icon{ iconP } {}
    Point() : Point(1, 1, '.') {};
};


//----- env var -----
const int HIGH = 10;
const int WIDTH = 10;

int fps = 4;
int latency = 1000 / fps;
vector<Point> pointArr = {};
//===== env var =====

// нужно написать функцию, которая будет обрабатывать
// соприкосновения объектов. написанный алгоритм 
// должен быть легко масштабируемым. 
// для данного задания нужно описать взаимодействие
// персонажа и нпс, а факт их соприкосновения будет
// выводиться в display[0][0] как 0 - нет коллизии,
// 1 - есть коллизия.

int main()
{
    std::cout << "Hello World!\n";
    Sleep(1000);
    system("cls");
    
    Point me{ 2,2,'@' };
    pointArr.push_back(me);
    
char display[HIGH][WIDTH]{};

    bool main_flag = true;


    while (main_flag)
    {
        
        for (int i = 0; i < HIGH; ++i)
        {
            for (int j = 0; j < WIDTH; ++j)
            {
                display[i][j] = ' ';
            };
        };

        for (int i = 0; i < pointArr.size(); ++i)
        {
            display[pointArr[i].y][pointArr[i].x] = pointArr[i].icon;
        }

        for (int i = 0; i < HIGH; ++i)
        {
            for (int j = 0; j < WIDTH; ++j)
            {
                cout << display[i][j];
            };
            cout << "\n";
        };


        Sleep(latency);
        // здесь обработка клавиш для движения персонажа
        system("cls");
    }
}
